{"WAIT": "WAIT(seconds [;'Condition' [;'Message']]) : Ardis OPTIMIZER application sleeps at most 'seconds', or until Condition returns true or ESC is pressed.",
"LABEL": "LABEL(LayNo;PartNo;Copies;PartL;PartW [;ReportName [;Resultformula ] ]): prints parts/size label (PartNo>0=PartNumber, PartNo=-1:Size label, PartNo=-2=Rest label)",
"Wizard": "WIZARD: runs optimization wizard",
"Axis": "Axis(id;value;status) where id:1=parallel axis, 2=saw blade height, 3=saw blade angle, 4=angle axis. Used for external communication with sliding table saws",
"REPORT":"REPORT ('report name' ; 'filter' ; 'multiplier' ; 'printer name' ; 'DocTitle' ): printing defined report",
"EXPORT":"EXPORT ('report name';'filter';'export file'): exporting a report to a text file",
"RESULT":"RESULT ('Summary';'Layouts';'Parts';'Sheets';'Edges'): print defined results grids",
"RUN":"RUN ('application path';'arguments'): run external application",
"CALL":"CALL ('application path';'arguments'): run external application and wait until application has been ended.",
"RUNLINK":"RUNLINK ('machine link name' ; 'COINIPath' ; '/EDIT=1' ; '/MACH=machine name'): transform current results to machine format, optionally using specified non-default CO.INI parametersset \n RUNLINK *: executes all post-processors to be used for the project's patterns (same as Shift+F6)",
"OPEN":"Open 'file path.R41': opens project (result) file as currentproject \n Open 'filepath.STK' \n Open 'filepath.STD' \n Open 'file path.MCH': Adds new or existing parts (*.STK), sheets (*.STD) or machine parameter (*.MCH) file to the currentproject \n Open 'filepath.RPT': adds reportdefinition \n Open ('file path.xxx'; 'template.STK'): imports a file with a foreign file format using atemplate \n OPEN ('file name' ; 'STK' ; ADODB ;ADOQuery) \n OPEN ( '' ; 'R41') or OPEN ( '' ; 'default.r41') starts a new project with requested template",
"SAVE":"SAVE: saves all changes of the currentproject \n SAVE 'path.r41': saves project with anothername \n SAVE '[folder\\]name.COP': saves project in a compressedfile \n SAVE '[folder\\]name.XML': saves project in XML format",
"ReplaceByValue":"ReplaceByValue: replaces the parts formulas by its current value",
"OPTIMIZE":"Optimize current project",
"PartQty":"PartQty 0:Subtract part production from part quantity field, PartQty 1:Add part production to part 'done' field",
"SheetQty":"SheetQty: subtract sheets production from sheets quantity in stock",
"RestToSheet":"RestToSheet or RestToSheet 'sheet file name': generates rest parts as sheets for later use",
"RestToPart":"RestToPart [ ( 'PatternFilter' [;'Restfilter] ) ] : converts re-usable off-cuts to parts",
"RestToScrap":"RestToScrap [ ( 'PatternFilter' [;'Restfilter] ) ]: transforms all off-cuts to scrap or only those that match the filter",
"StripBridge":"StripBridge: maximizes strip bridging over same length strips in thepatterns \n StripBridge (value [;min level [;max level [;layfilter]]]):strip bridging over different length strips with at most 'value' difference on cutting levels min. to max. and for patterns matching layfilter",
"SheetSize":"SheetSize ('FormNewLength' ; 'FormNewWidth' ; 'PatternFilter'): changes the sheet size of (filtered) patterns by means of formulas the calculate a pattern's new length and width",
"LaySelect":"LaySelect 'condition' : deletes all patterns where condition is false",
"LayTurnDir":"LayTurnDir ['condition'] : turns the first strip direction for patterns when condition is true or for all patterns when no condition is specified",
"MergeFillerPart":"MergeFillerPart 0: fills 'Done' field of normal parts with available filler parts (inputdata) \n MergeFillerPart 1: adjusts used filler parts with new produced filler parts",
"TrimToScrap":"TrimToScrap: converts rip and cross cut level trim as separate scrapstrip \n TrimToScrap( min. cutting level ; max. cutting level )",
"Sort":"SORT ('field1;ASC;NUM' ; 'field2;DESC' ; ...): sorting patterns on criteria \n SORT('*.STK';'field1' ;...) \n SORT('name.STD';'field1';...)",
"SortOpt":"SORTOPT ('field1;ASC;NUM' ; 'field2;DESC' ; ...): sorting patterns on criteria + optimized part sequence",
"Bundle":"BUNDLE (maximum bookheight;'field1;A;N' ; 'field2;D' ; ...): bundles (grouping) patterns on criteria (no sorting!) e.g. Bundle (180 ; 'SheetNo;A;N') to group pattern sizes per book of 180mm \n BUNDLE without parameter creates for a pattern for eachbook \n BUNDLE bookheight or 'formula': split sheets from each pattern per book of max. bookheight",
"Activate":"ACTIVATE 'Application title': activates the application or ACTIVATE: activates Cutting Optimizer to the foreground",
"Hide":"Hide 'WindowName':mininizes request windows or Hide:minimizes Cutting Optimizer",
"Msg":"MSG 'message': shows a dialog message box on the screen with the message, MSG('message';MB_style) where MB_style:0=OK, 4=YESNO returns 6 when clicked Yes, 7 when clicked No",
"AddPart":"AddPart 'parts file name': Adds previously opened parts file to the project with new name",
"InsPart":"InsPart: Insert perviously opened parts into the project's current partsfile \n INSPART 'parts file name' : insert a parts calculation into a defined parts file",
"OpenPart":"OpenPart 'full path name of parts file or template': Load parts file for editing",
"Insert":"INSERT '*.STK': inserts a parts file into the current partsfile \n INSERT '*.STD': inserts a basic material file into the current basic materiallist \n INSERT ('current.STD' ; 'importfile' ; 'updatekey'): updates the current sheets file with updated values",
"ShowQuestions":"ShowQuestions: Displays the questions of a previously opened parts template in a modal dialog window",
"MergeQuestions":"MergeQuestions: questions already existing in the question list of the project's current parts file are used for default answering",
"Exit":"Exit: Closes the project and exits theapplication \n EXIT 0: exists COWIN without saving documents",
"Break":"Break or Break condition: quits current macro or go to the next 'breakend'",
"Macro":"Macro 'macroname': executes all commands defined in the macroname.MCOfile \n Macro ('macroname';'parameters';'varname'[;'delimiter']): repeats calling the sub-macro for each subfield in parameters using varname",
"SynchRes":"SynchRes: copies the parts, sheets and edges input tables to the result tables",
"Set":"SET ('File name.ext' or 'R41 tablename' ;'variable';'new value or =formula' [ ; startrecno [ ; endrecno]] ): changes the value of a parameter in the file \n SET('variable';'new';'value'): changes a project's parameter value e.g. SET ('OptparRemark' ; 'Project's remark')",
"EXCLUDE":"EXCLUDE 'file name.ext': excludes file from project (.STK, .STD, .MCH, .RPT) Wildcards (* and ?) are allowed (e.g. *.STK=excludes all parts files fromproject) \n EXCLUDE ('ext' ; index): excludes x-file from project",
"ProducePart":"ProducePart (LayNo;PartNo;Copies;PartL;PartW): Credits the laypart's production (PrintedLabel) quantity. All next REPORT and EXPORT command works in this temporarytable \n ProducePart:removes temporary table",
"CheckClamps":"CheckClamps: verify the clamps for the pattern strips and adjust the strips quantitiesaccordingly \n CheckClamps 'layfilter': processes only patterns matching the condition",
"SHEETLABEL":"SheetLabel ('sheets file' ; 'filter' ; 'report name' ; 'printer name')",
"MacroImport":"MacroImport ('macroname' ; 'ADO connection' ; 'SQLquery'): repeat the sub-macro for each records giving the field='value' for all fields\r\nMacroImport ('macro name' ; 'full path of text file'): iterates each line in variable IMPORT\r\nMacroImport ('macro name' ; 'XML file' ; 'Element1 [; Element2]'): triggers the macro whenever a defined element has reached",
"LayPartOutD":"LayPartOutD: analyzes the number of times a part is coming lengthwise or crosswise out of themachine \n LayPartOutD 1: analyzes and separates parts which are coming out of the machine in both directions",
"LayStripGroupParts":"LayStripGroupParts ( max. number of parts ; 'strip parts filter' [ ; new cutting thickness ; max. scrap milling distance ; max. scrap distance front ; 'lay-out filter' ] )",
"STRIPDIV":"STRIPDIV ('condition' ; 'L'; 'B' [; 'condition2' ; 'L' ; 'B' ; ...] ): divides scrap/rest pieces into smaller pieces on first matching condition and when the result of the L and B formula is valid",
"LAYPART":"LAYPART ('Bookheight' ; 'Sorting criterium'): split or re-sort lay-out parts records to match the cutting sequence on the machine",
"LayRestID":"LayRestID ( ['OffcutIDFormula'] ; ['LayFilter'] ): generates (unique) OffcutID in LayPartRemark, default formula=('X' + if(SheetD == 1 ; if (LayPartW > LayPartL ; 'B' ; 'L') ; LayPartD == 2 ; if (LayPartW > LayPartL ; 'L' ; 'B')) + ($(No) STR '#06'))",
"IPC":"IPC ('file path or wild card' ; 'formula' [; NofTimes]) : waits for a existing file matching the wild card and evaluates the formula for each line of the file (=AutoSignal), if used NofTimes limits the number of files to be received",
"LayPicture":"LayPicture ( ['formula subdir'] ; '[formula file name]' ; 'file ext' ; ['formula X pixels'] ; ['formula Y pixels'] ; ['layfilter'])",
"STATUS":"Status 'message' : shows/adds a message in a status window on the screen, until the Status (without parameters) is triggered",
"WRITEFILE":"WRITEFILE ( 'file path' ; 'data' ) : appends 'data' to a new or existing file, a previous call to DELFILE 'file path' ensures you to work with a newfile \n WRITEFILE ('COM1;9600;0;8;0;0' ; 'datastring' [; ReplyTimeOut]): writes data to com-port and if ReplyTimeOut > 0 in secs, then wait for the reply",
"INPUT":"INPUT ('Title' [; 'Default Value' ] [; 'field delimiter or header fields'] [ ; record delimiter]): asks the user to enter some data or choose a value from a table",
"COPYFILE":"COPYFILE ('source|wildcard';'destination' [;1] ): copies source file(s) to destination folder or destination full pathname \n ;1=optional : to move the file(s) instead of copying \n COPYFILE( 'source|wildcard' ; 'COM1;9600;0;8;0;1' ) copies file(s) to serial receiver \n COPYFILE ('source|wildcard' ; 'ftp://ftpserver:port' ; 'username' ; 'psw'): upload files to ftpserver \n COPYFILE ('ftp://ftpserver/subdir/file.ext:port' ; 'destinationfolder\\' ; 'username' ; 'psw'): download file from ftpserver",
"returns":"the number of copied files"
}